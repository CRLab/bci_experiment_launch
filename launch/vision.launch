<launch>  
  <arg name="use_pointcloud_filter" default="False" />
  <arg name="use_fake_vision" default="False"/>
  <arg name="openni_respawn" default="True" />


  <!-- Use the filtered point cloud topic if available, the unfiltered one otherwise -->
  <param name="cloud_topic" value="/filtered_pc" if="$(arg use_pointcloud_filter)"/>
  <param name="cloud_topic" value="/camera/depth_registered/points" unless="$(arg use_pointcloud_filter)"/>

  <group unless="$(arg use_fake_vision)">
    <node name="openni_launcher" pkg="bci_experiment_launch" type="launch_scripts.bash" args=" openni_launch openni.launch depth_registration:=true bond:=true" launch-prefix="roxterm --title=vision --tab-name=openni -e" />

    <node name="pc_filter" pkg="bci_experiment_launch" type="launch_scripts.bash" args=" pc_filter pc_filter.launch" launch-prefix="/usr/bin/roxterm --tab --tab-name=pc_filter -e" if="$(arg use_pointcloud_filter)"/>
  </group>

  <group if="$(arg use_fake_vision)" >
      <node name="fake_cloud_data" pkg="bci_experiment_launch" type="no_kinect.py" launch-prefix="/usr/bin/roxterm --tab --tab-name=fake_vision -e"/>
  </group>


  <node pkg="model_rec2" name="model_rec" type="ObjRecRANSACRun" launch-prefix="roxterm --tab --tab-name=model_rec -e"/>


</launch>
